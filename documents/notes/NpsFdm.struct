// The NPS module executes api calls and some mathmatic transformations
// obtaining the below state representation of the flight wich is then accessed in later
// steps by the autopiolet to determine the commands that will be sent back to JSBSim 
struct NpsFdm {

  double time;
  double init_dt;
  double curr_dt;
  bool_t on_ground;
  int nan_count;

  /*  position */
  struct EcefCoor_d  ecef_pos;
  struct NedCoor_d ltpprz_pos;
  struct LlaCoor_d lla_pos;
  double hmsl;
  // for debugging
  struct LlaCoor_d lla_pos_pprz; //lla converted by pprz from ecef
  struct LlaCoor_d lla_pos_geod; //geodetic lla from jsbsim
  struct LlaCoor_d lla_pos_geoc; //geocentric lla from jsbsim
  double agl; //AGL from jsbsim in m

  /** velocity in ECEF frame, wrt ECEF frame */
  struct EcefCoor_d  ecef_ecef_vel;
  /** acceleration in ECEF frame, wrt ECEF frame */
  struct EcefCoor_d  ecef_ecef_accel;

  /** velocity in body frame, wrt ECEF frame */
  struct DoubleVect3 body_ecef_vel;   /* aka UVW */
  /** acceleration in body frame, wrt ECEF frame */
  struct DoubleVect3 body_ecef_accel;

  /** velocity in LTP frame, wrt ECEF frame */
  struct NedCoor_d ltp_ecef_vel;
  /** acceleration in LTP frame, wrt ECEF frame */
  struct NedCoor_d ltp_ecef_accel;

  /** velocity in ltppprz frame, wrt ECEF frame */
  struct NedCoor_d ltpprz_ecef_vel;
  /** accel in ltppprz frame, wrt ECEF frame */
  struct NedCoor_d ltpprz_ecef_accel;

  /** acceleration in body frame, wrt ECI inertial frame */
  struct DoubleVect3 body_inertial_accel;

  /** acceleration in body frame as measured by an accelerometer (incl. gravity) */
  struct DoubleVect3 body_accel;

  /* attitude */
  struct DoubleQuat   ecef_to_body_quat;
  struct DoubleQuat   ltp_to_body_quat;
  struct DoubleEulers ltp_to_body_eulers;
  struct DoubleQuat   ltpprz_to_body_quat;
  struct DoubleEulers ltpprz_to_body_eulers;

  /*  angular velocity and acceleration in body frame, wrt ECEF frame */
  struct DoubleRates  body_ecef_rotvel;
  struct DoubleRates  body_ecef_rotaccel;

  /*  angular velocity and acceleration in body frame, wrt inertial ECI frame */
  struct DoubleRates  body_inertial_rotvel;
  struct DoubleRates  body_inertial_rotaccel;

  struct DoubleVect3 ltp_g;
  struct DoubleVect3 ltp_h;

  struct DoubleVect3 wind; ///< velocity in m/s in NED

  // Control surface positions (normalized values)
  float elevator;
  float flap;
  float left_aileron;
  float right_aileron;
  float rudder;

  //engine state for first engine
  uint32_t num_engines;
  uint32_t eng_state[FG_NET_FDM_MAX_ENGINES];// Engine state (off, cranking, running)
  float rpm[FG_NET_FDM_MAX_ENGINES];       // Engine RPM rev/min

};
